// The 'use server' directive is critical: It tells Next.js to only execute this code on the server.
'use server';

/**
 * @fileOverview Number theory problem solver flow.
 *
 * This file defines a Genkit flow that takes a number theory problem as input
 * and returns a step-by-step solution generated by an AI model.
 *
 * - problemSolver - A function that handles the number theory problem-solving process.
 * - ProblemSolverInput - The input type for the problemSolver function.
 * - ProblemSolverOutput - The return type for the problemSolver function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

// Define the input schema for the problem solver.
const ProblemSolverInputSchema = z.object({
  problem: z
    .string()
    .describe('The number theory problem to be solved. Be specific.'),
});
export type ProblemSolverInput = z.infer<typeof ProblemSolverInputSchema>;

// Define the output schema for the problem solver.
const ProblemSolverOutputSchema = z.object({
  solution: z
    .string()
    .describe('The step-by-step solution to the number theory problem.'),
});
export type ProblemSolverOutput = z.infer<typeof ProblemSolverOutputSchema>;

// Define the main function that will be called to solve the problem.
export async function problemSolver(input: ProblemSolverInput): Promise<ProblemSolverOutput> {
  return problemSolverFlow(input);
}

// Define the prompt for the AI model.
const problemSolverPrompt = ai.definePrompt({
  name: 'problemSolverPrompt',
  input: {
    schema: z.object({
      problem: z
        .string()
        .describe('The number theory problem to be solved. Be specific.'),
    }),
  },
  output: {
    schema: z.object({
      solution: z
        .string()
        .describe('The step-by-step solution to the number theory problem.'),
    }),
  },
  prompt: `You are an expert number theory problem solver. I will provide a number theory problem and you will respond with a step-by-step solution. Explain each step clearly.

Problem: {{{problem}}}`,
});

// Define the Genkit flow.
const problemSolverFlow = ai.defineFlow<
  typeof ProblemSolverInputSchema,
  typeof ProblemSolverOutputSchema
>({
  name: 'problemSolverFlow',
  inputSchema: ProblemSolverInputSchema,
  outputSchema: ProblemSolverOutputSchema,
},
async input => {
  const {output} = await problemSolverPrompt(input);
  return output!;
});
